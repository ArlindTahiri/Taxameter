@page "/control"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject HttpClient Http
@implements IAsyncDisposable
@using System.Globalization;

<PageTitle>Control - TTTT</PageTitle>

<div class="container my-4">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card shadow-sm">
                <div class="card-body">
                    <h3 class="card-title text-center mb-4">Fahrtsteuerung</h3>

                    <ul class="list-group list-group-flush mb-4">
                        <li class="list-group-item d-flex justify-content-between">
                            <span>Gesamtpreis:</span>
                            <strong>@currentFare.Fare.ToString("0.00") €</strong>
                        </li>
                        <li class="list-group-item d-flex justify-content-between">
                            <span>Kilometer gefahren:</span>
                            <strong>@currentFare.KilometerDriven.ToString("0.00") km</strong>
                        </li>
                        <li class="list-group-item d-flex justify-content-between">
                            <span>Fahrzeit:</span>
                            <strong>@currentFare.TimeDrivenMinutes min</strong>
                        </li>
                    </ul>

                    <div class="mb-3">
                        <label class="form-label fw-bold">Tarif auswählen:</label>
                        <div class="d-flex flex-column gap-2 mb-4">
                            <button class="btn @(activeTarif == 1 ? "btn-primary" : "btn-outline-primary")"
                                    title="2,0 € pro Kilometer, 0,5 € pro Minute"
                                    @onclick="() => Start(2.0m, 0.5m)"
                                    disabled="@(activeTarif != null)">
                                Standardtarif
                            </button>
                            <button class="btn @(activeTarif == 2 ? "btn-success" : "btn-outline-success")"
                                    title="1,2 € pro Kilometer, 0,2 € pro Minute"
                                    @onclick="() => Start(1.2m, 0.2m)"
                                    disabled="@(activeTarif != null)">
                                Freundschaftspreis
                            </button>
                            <button class="btn @(activeTarif == 3 ? "btn-warning" : "btn-outline-warning")"
                                    title="5,0 € pro Kilometer, 1,5 € pro Minute"
                                    @onclick="() => Start(5.0m, 1.5m)"
                                    disabled="@(activeTarif != null)">
                                Gold-Digger-Modus 💎
                            </button>
                        </div>


                        <div class="d-flex gap-3 justify-content-center">
                            <button class="btn btn-danger"
                                    @onclick="Stop"
                                    disabled="@(activeTarif == null)">
                                Stopp
                            </button>
                            <button class="btn btn-secondary"
                                    @onclick="Reset"
                                    disabled="@(activeTarif != null)">
                                Reset
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <div class="mt-4">
                <LiveMap />
            </div>
        </div>
    </div>
</div>

@code {
    private FareInfo? currentFare = new();
    private HubConnection? connection;

    private int? activeTarif = null; // 1 = Standard, 2 = Freundschaft, 3 = Gold-Digger

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            connection = new HubConnectionBuilder()
                .WithUrl(Navigation.ToAbsoluteUri("/taxameterHub"))
                .Build();

            connection.On<FareInfo>("FareUpdated", (fareInfo) =>
            {
                currentFare = fareInfo;
                InvokeAsync(StateHasChanged);
            });

            await connection.StartAsync();
        }
    }

    private async Task Start(decimal pricePerKm, decimal pricePerMinute)
    {
        // Erkennen, welcher Tarif aktiv wird anhand der Preise (alternativ extra Parameter)
        if (pricePerKm == 2.0m && pricePerMinute == 0.5m)
            activeTarif = 1;
        else if (pricePerKm == 1.2m && pricePerMinute == 0.2m)
            activeTarif = 2;
        else if (pricePerKm == 5.0m && pricePerMinute == 1.5m)
            activeTarif = 3;
        else
            activeTarif = null; // Fallback, falls unbekannt

        string url = $"/api/taxameter/start?pricePerKm={pricePerKm.ToString(CultureInfo.InvariantCulture)}&pricePerMinute={pricePerMinute.ToString(CultureInfo.InvariantCulture)}";
        await Http.PostAsync(url, null);
        await JS.InvokeVoidAsync("initTaxameterClient");
        StateHasChanged();
    }

    private async Task Stop()
    {
        await Http.PostAsync("/api/taxameter/stop", null);
        await JS.InvokeVoidAsync("stopTaxameterClient");

        // Tarif wird gestoppt, also kein aktiver Tarif mehr
        activeTarif = null;
        StateHasChanged();
    }

    private async Task Reset()
    {
        await Http.PostAsync("/api/taxameter/reset", null);
    }

    public async ValueTask DisposeAsync()
    {
        if (connection is not null)
        {
            await connection.DisposeAsync();
        }
    }
}
